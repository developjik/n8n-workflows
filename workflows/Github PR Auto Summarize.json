{"createdAt":"2025-05-28T02:31:05.778Z","updatedAt":"2025-05-28T05:08:36.000Z","id":"ObJTvu2EtGhRuaCh","name":"Github PR Auto Summarize","active":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[0,0],"id":"89e0284b-a0b8-4d56-a0e6-843ea240547e","name":"When clicking ‘Test workflow’"},{"parameters":{"workflowId":{"__rl":true,"value":"uGqCptWtD45pUJt4","mode":"list","cachedResultName":"[COLO] (Sub) Get COLO Variables"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[220,0],"id":"e4ba683b-ceae-4a87-8b30-c839f71614fb","name":"Execute Workflow"},{"parameters":{"assignments":{"assignments":[{"id":"da025850-15c2-40b9-94d8-e6f37cd46b60","name":"base_branch","value":"dev","type":"string"},{"id":"47966cf5-48cf-445c-967e-abc32d284504","name":"head_branch","value":"feat/PMS-451","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[440,0],"id":"8ce332ae-9bfa-4415-ae5a-22da94ab0c66","name":"Set Variables"},{"parameters":{"promptType":"define","text":"=너는 숙련된 소프트웨어 엔지니어이자 기술 작가야. 주어진 GitHub API의 브랜치 비교 결과 데이터를 바탕으로, 전문적이고 명확한 Pull Request (PR) 본문을 Markdown 형식으로 생성해야 해.\n\n**입력 정보:**\n\n*   **소스 브랜치 (Source Branch):** `{{ $json.headBranch }}`\n*   **대상 브랜치 (Target Branch):** `{{ $json.baseBranch }}`\n*   **GitHub API Compare 응답 데이터:**\n    ```json\n    {{ JSON.stringify($json.githubData, null, 2) }}\n    ```\n\n**PR 본문 생성 가이드라인:**\n\n1.  **PR 제목 (선택 사항):** 소스 브랜치에서 대상 브랜치로의 병합임을 명시하는 간결한 제목을 제안해줘. (예: `Merge {{ $json.headBranch }} into {{ $json.baseBranch }}`) 이 부분은 생략해도 괜찮아.\n\n2.  **PR 본문 (Markdown 형식):** 다음 섹션들을 포함하여 작성해줘.\n\n    *   **`## 🚀 변경사항 요약 (Summary)`**\n        *   `{{ $json.headBranch }}` 브랜치의 변경 사항을 `{{ $json.baseBranch }}` 브랜치로 병합하는 PR임을 명시해줘.\n        *   `githubData.total_commits` 값을 참고하여 총 커밋 수를 언급해줘.\n        *   전체 변경 사항에 대한 간략한 개요를 작성해줘. (AI가 `githubData.commits`의 메시지나 `githubData.files`의 파일명을 보고 추론)\n\n    *   **`## ✨ 주요 변경점 (Key Changes)`**\n        *   `githubData.commits` 와 `githubData.files` 를 분석하여, 가장 중요하거나 눈에 띄는 변경 사항 2-3가지를 간략하게 설명해줘. (예: \"새로운 사용자 인증 API 추가\", \"주문 처리 로직 개선\")\n        *   만약 명확한 주요 변경점을 찾기 어렵다면, \"상세 변경 사항은 아래 커밋 및 파일 목록을 참고해주세요.\" 와 같이 작성해도 좋아.\n\n    *   **`## 📜 커밋 목록 (Commit Logs)`**\n        *   `githubData.commits` 배열을 사용해서, 각 커밋을 다음 형식으로 나열해줘:\n            *   `- {7자리 축약 SHA} - {커밋 메시지 첫 줄} (작성자: {커밋 작성자 이름})`\n        *   커밋이 없다면 \"새로운 커밋이 없습니다.\" 라고 표시해줘.\n\n    *   **`## 📄 변경된 파일 (Changed Files)`**\n        *   `githubData.files` 배열을 사용해서, 각 파일을 다음 형식으로 나열해줘:\n            *   파일 상태에 따라 이모티콘을 사용해줘:\n                *   `added`: ✨ (Added)\n                *   `modified`: ♻️ (Modified)\n                *   `removed`: 🗑️ (Deleted)\n                *   `renamed`: 🚚 (Renamed)\n            *   형식: `- {상태 이모티콘} \\`{파일명}\\` (+{추가된 라인 수} -{삭제된 라인 수})`\n        *   변경된 파일이 없다면 \"변경된 파일이 없습니다.\" 라고 표시해줘.\n\n    *   **`## 💬 기타 (Miscellaneous)`**\n        *   (이 부분은 비워두거나, 사용자가 추가 정보를 입력할 수 있도록 안내 문구를 넣어줘. 예: \"- 관련 이슈: #\\n- 테스트 환경: \")\n\n**주의사항:**\n*   커밋 메시지가 매우 길 경우, 첫 번째 줄만 사용하거나 적절히 요약해줘.\n*   전문적이고 간결한 어투를 사용해줘.\n*   만약 `githubData`가 비어있거나 분석할 내용이 없다면, \"변경 사항이 없습니다.\" 또는 \"두 브랜치가 동일합니다.\" 와 같이 명확히 알려줘.\n\n이제, 위에 제공된 입력 정보와 가이드라인에 따라 PR 본문을 생성해줘.","options":{}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[1060,0],"id":"bbaf1de9-afaf-4048-8959-73a051c78f7b","name":"AI Agent"},{"parameters":{"jsCode":"const targetBranch = 'main'; // 예시: 'main'\nconst currentBranch ='dev'; // 예시: 'dev'\n\n// GitHub API 응답 데이터 가져오기 (HTTP Request 노드의 결과)\nconst apiResponse = $input.item.json; // GitHub API 응답 전체\n\n// API 응답이 배열 안에 하나의 객체로 들어있으므로, 첫 번째 요소를 사용합니다.\nconst apiData = Array.isArray(apiResponse) && apiResponse.length > 0 ? apiResponse[0] : apiResponse;\n\nlet prBody = `## ✨ PR: ${currentBranch} → ${targetBranch}\\n\\n`;\n\nprBody += `### 📝 요약 (Summary)\\n`;\nprBody += `- 이 PR은 **${currentBranch}** 브랜치의 변경 사항을 **${targetBranch}** 브랜치로 병합하기 위한 것입니다.\\n`;\nif (apiData && apiData.total_commits) {\n  prBody += `- 총 **${apiData.total_commits}개**의 새로운 커밋이 포함되어 있습니다.\\n`;\n}\nprBody += `\\n`;\n\n// 커밋 로그 섹션\nprBody += `### 📜 커밋 로그 (Commit Logs)\\n`;\nif (apiData && apiData.commits && apiData.commits.length > 0) {\n  apiData.commits.forEach(commitEntry => { // API 응답에서 'commits' 배열 사용\n    const shaShort = commitEntry.sha.substring(0, 7);\n    // 커밋 메시지의 첫 줄만 가져오기\n    const messageFirstLine = commitEntry.commit.message.split('\\n')[0];\n    const authorName = commitEntry.commit.author.name;\n    prBody += `- ${shaShort} - ${messageFirstLine} (작성자: ${authorName})\\n`;\n  });\n} else {\n  prBody += `- 새로운 커밋이 없습니다.\\n`;\n}\nprBody += `\\n`;\n\n// 변경된 파일 섹션\nprBody += `### 📄 변경된 파일 (Changed Files)\\n`;\nif (apiData && apiData.files && apiData.files.length > 0) {\n  apiData.files.forEach(fileEntry => { // API 응답에서 'files' 배열 사용\n    let statusEmoji = '';\n    switch(fileEntry.status) {\n      case 'added': statusEmoji = '✨ Added'; break;\n      case 'modified': statusEmoji = '♻️ Modified'; break;\n      case 'removed': statusEmoji = '🗑️ Deleted'; break;\n      case 'renamed': statusEmoji = '🚚 Renamed'; break;\n      // 필요에 따라 다른 status 값에 대한 처리 추가\n      default: statusEmoji = `❓ ${fileEntry.status}`;\n    }\n    prBody += `- ${statusEmoji}: \\`${fileEntry.filename}\\` (+${fileEntry.additions} -${fileEntry.deletions})\\n`;\n  });\n} else {\n  prBody += `- 변경된 파일이 없습니다.\\n`;\n}\nprBody += `\\n`;\n\n// 사용자가 추가적으로 작성할 수 있는 섹션 (템플릿)\nprBody += `### 📌 주요 변경 사항 (Key Changes)\\n`;\nprBody += `- (이곳에 이 PR의 주요 변경 사항을 간략히 설명해주세요.)\\n\\n`;\n\nprBody += `### ✅ 기타 (Miscellaneous)\\n`;\nprBody += `- 관련 이슈: # (이슈 번호가 있다면 링크하세요. 예: #123)\\n`;\nprBody += `- 테스트 완료 여부: (예: 완료 / 진행 중 / 해당 없음)\\n`;\n\n// 최종적으로 생성된 PR 본문을 json 객체로 반환\nreturn [{ json: { prContent: prBody, currentBranch: currentBranch, targetBranch: targetBranch, titleSuggestion: `Merge ${currentBranch} into ${targetBranch}` } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[780,-220],"id":"7d630541-ed8f-4a6b-a67d-431ea46c15f2","name":"Code44"},{"parameters":{"jsCode":"const githubData = $('Get Github Compare').item.json;\n\nreturn [{\n  json: {\n    githubData,\n    baseBranch: $('Set Variables').first().json.base_branch,\n    headBranch: $('Set Variables').first().json.head_branch\n  }\n}];\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[880,0],"id":"ad9957d5-34ef-4927-bf51-33dc02aa8b9b","name":"Code"},{"parameters":{"url":"=https://api.github.com/repos/colosseumcoinckr/pms-frontend/compare/dev...feat/PMS-451","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept","value":"application/vnd.github.v3+json"},{"name":"Authorization","value":"=Bearer {{ $('Execute Workflow').item.json.github_auth }}"}]},"options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[660,0],"id":"dafff484-d223-45df-b003-2561c11c3226","name":"Get Github Compare"},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1-nano","mode":"list","cachedResultName":"gpt-4.1-nano"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[1060,220],"id":"2d66695e-07a3-48dc-a89c-ea7c6cf3389f","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"teZK5ibPNHcUd7eK","name":"Developjik OpenAi account"}}}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Execute Workflow","type":"main","index":0}]]},"Execute Workflow":{"main":[[{"node":"Set Variables","type":"main","index":0}]]},"Set Variables":{"main":[[{"node":"Get Github Compare","type":"main","index":0}]]},"Code":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Get Github Compare":{"main":[[{"node":"Code","type":"main","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"062be6d8-6743-40d8-b4c6-13a8c4a94e9e","triggerCount":0,"tags":[]}