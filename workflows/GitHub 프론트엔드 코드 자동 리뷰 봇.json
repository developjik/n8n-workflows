{"createdAt":"2025-04-30T07:23:44.894Z","updatedAt":"2025-05-16T02:53:45.000Z","id":"btTPiC1KEBopzDjj","name":"GitHub 프론트엔드 코드 자동 리뷰 봇","active":true,"nodes":[{"parameters":{"model":{"__rl":true,"value":"gpt-4o-mini","mode":"list","cachedResultName":"gpt-4o-mini"},"options":{}},"id":"f9465fca-93b7-4c05-92dd-b835d3226d3a","name":"OpenAI Chat Model","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","position":[1160,820],"typeVersion":1.2,"credentials":{"openAiApi":{"id":"teZK5ibPNHcUd7eK","name":"Developjik OpenAi account"}}},{"parameters":{"mode":"runOnceForEachItem","jsCode":"const parseLastDiff = (gitDiff, filename) => { \n  gitDiff = gitDiff.replace(/\\n\\\\ No newline at end of file/, '')\n  \n  const diffList = gitDiff.trimEnd().split('\\n').reverse();\n  const lastLineFirstChar = diffList?.[0]?.[0];\n  const lastDiff =\n    diffList.find((item) => {\n      return /^@@ \\-\\d+,\\d+ \\+\\d+,\\d+ @@/g.test(item);\n    }) || '';\n\n  const [lastOldLineCount, lastNewLineCount] = lastDiff\n    .replace(/@@ \\-(\\d+),(\\d+) \\+(\\d+),(\\d+) @@.*/g, ($0, $1, $2, $3, $4) => {\n      return `${+$1 + +$2},${+$3 + +$4}`;\n    })\n    .split(',');\n  \n  if (!/^\\d+$/.test(lastOldLineCount) || !/^\\d+$/.test(lastNewLineCount)) {\n    return {\n      lastOldLine: -1,\n      lastNewLine: -1,\n      gitDiff: gitDiff,\n    };\n  }\n\n  const lastOldLine = lastLineFirstChar === '+' ? null : (parseInt(lastOldLineCount) || 0) - 1;\n  const lastNewLine = lastLineFirstChar === '-' ? null : (parseInt(lastNewLineCount) || 0) - 1;\n\n  return {\n    filename,\n    lastOldLine,\n    lastNewLine,\n    gitDiff,\n  };\n};\n\nreturn parseLastDiff($input.item.json.patch || '', $input.item.json.filename || '' )\n"},"id":"f5894c0c-a792-42f5-a430-7df3d3794811","name":"Parse Last Diff Line","type":"n8n-nodes-base.code","position":[640,600],"typeVersion":2},{"parameters":{"httpMethod":"POST","path":"frontend-code-review","options":{}},"id":"b88dfb7c-26b4-4816-8153-a0f14b4c7ab9","name":"Webhook","type":"n8n-nodes-base.webhook","position":[-680,920],"webhookId":"d8d53c93-84e2-4309-9b7d-292c35f27a14","typeVersion":2},{"parameters":{"content":"# 🚀 GitHub PR 기반 GPT 자동 코드 리뷰 워크플로우\n\n이 워크플로우는 GitHub에서 Pull Request(PR)이 생성되거나 변경될 때, 변경된 프론트엔드 코드를 자동으로 분석하고 GPT를 활용해 코드 리뷰를 생성합니다. 리뷰 점수가 낮을 경우에만 PR에 자동으로 코멘트를 남겨, 개발자의 코드 품질 향상과 리뷰 효율화를 동시에 실현합니다.\n\n---\n\n## ⚙️ 전체 작동 흐름\n\n1. GitHub의 PR 이벤트(`opened`, `reopened`)를 Webhook으로 수신합니다.\n2. 해당 PR에서 변경된 파일 목록을 조회합니다.\n3. 변경된 파일 중 프론트엔드 관련 확장자(JS, TS, JSX, TSX, CSS 등)만 필터링합니다.\n4. 각 파일에 대해 다음 작업을 수행합니다:\n   - git diff를 기반으로 변경된 코드 블럭을 추출합니다.\n   - GPT-4o-mini 모델에 코드 리뷰를 요청합니다.\n   - GPT의 응답에서 코드 리뷰 본문과 점수를 분리합니다.\n   - 코드 평가 점수가 80점 미만인 경우에만, 해당 코드 라인에 PR 코멘트를 자동으로 등록합니다.\n\n---\n\n## 🧠 리뷰 분석 기준\n\nGPT는 다음과 같은 프론트엔드 코드 품질 항목을 중심으로 리뷰를 생성합니다:\n\n- 컴포넌트 구조의 적절성과 단일 책임 원칙(SRP) 준수 여부\n- 상태 관리 방식 (useState, useReducer, 전역 상태 도구 등)\n- TypeScript 타입 정의의 명확성과 타입 안정성\n- Tailwind CSS 클래스 사용 방식과 디자인 시스템 일관성\n- 불필요한 렌더링 방지 및 성능 최적화 여부\n- 접근성(A11y) 관련 처리 여부\n- 코드의 재사용성과 유지보수성\n\n---\n\n## 🛠 주요 구성 노드 설명\n\n이 워크플로우는 n8n을 기반으로 다음과 같은 역할을 가진 노드들로 구성됩니다:\n\n- **Webhook**: GitHub PR 이벤트를 감지합니다.\n- **Get PR Files Change**: PR에 포함된 변경 파일 목록을 조회합니다.\n- **Loop**: 파일별로 반복적으로 리뷰 작업을 수행합니다.\n- **Skip File Change**: 변경 내용이 없거나 너무 많은 diff가 있는 경우 건너뜁니다.\n- **Parse Last Diff Line**: PR 코멘트를 어느 줄에 달지 판단하기 위해 마지막 변경 라인을 파악합니다.\n- **Code**: git diff에서 원본 코드와 변경된 코드를 추출합니다.\n- **AI Agent**: GPT-4o-mini 모델에 코드 리뷰를 요청합니다.\n- **Process GPT Review**: GPT의 응답에서 리뷰 점수와 본문을 분리합니다.\n- **If GPT Review Needed**: 리뷰 점수가 기준 이하(80점 미만)인지를 판단합니다.\n- **Post PR Comment**: 리뷰가 필요한 경우, 해당 코드 줄에 리뷰 코멘트를 자동으로 등록합니다.\n\n---\n\n## 📊 자동 점수 기반 리뷰 필터링\n\nGPT의 응답에는 항상 다음 형식으로 코드 평가 점수가 포함됩니다:","height":1580,"width":2960},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-780,-440],"id":"b1adf9bb-249b-499a-9433-9a46d06469cf","name":"Sticky Note"},{"parameters":{"promptType":"define","text":"=**파일 경로**: {{ $('Loop').item.json.filename }}\n\n다음은 프론트엔드 코드의 변경 사항입니다.  \n아래의 원본 코드와 새로운 코드를 기반으로, 다음 기준에 따라 **React/Next.js 기반 코드 리뷰**를 작성해 주세요.\n\n\n🧠 코드 리뷰 목적\n- 변경 의도와 목적을 먼저 파악\n- 개선할 부분은 제안 포함\n- 기술적 근거가 포함된 리뷰를 한국어로 Markdown 포맷으로 작성\n\n\n\n**🔀 코드 변경 전 원본 코드**:\n```tsx\n{{ $json.originalCode }}\n```\n\n**✅ 코드 변경 후 새로운 코드**:\n```tsx\n{{ $json.newCode }}\n```\n\n🎁 코드 리뷰는 동료 개발자의 성장을 돕는 관점에서 진심을 담아 작성해 주세요.","options":{"systemMessage":"=🧠 프론트엔드 코드 리뷰 전문가 프롬프트 (최종 개선 버전)\n\n🎯 역할 정의\n\n당신은 React, TypeScript, Next.js, Tailwind CSS에 정통한 프론트엔드 전문가입니다.\n단순한 지적이 아닌, 실질적인 개선 방향을 제시하고 동료 개발자의 성장을 돕는 코드 리뷰어로서 활동합니다.\n\n⸻\n\n✅ 리뷰 원칙\n\t1.\t정확한 이해\n코드의 의도와 맥락을 먼저 파악하고 그에 맞는 피드백을 제공합니다.\n\t2.\t실무 중심 전문성\n이론이 아닌, 현업에서 즉시 도움이 되는 구조/패턴/리팩토링 중심으로 리뷰합니다.\n\t3.\t함께 개선하는 시선\n문제점을 짚는 것에 그치지 않고, 어떻게 개선하면 좋을지 구체적인 제안을 함께 제공합니다.\n\t4.\t다각도 고려\n유지보수성, 성능, 사용자 경험, 팀 협업까지 다양한 관점에서 피드백합니다.\n\t5.\t교육적 접근\n단순한 코드 설명이 아니라, “왜 이런 구조가 더 좋은가?”를 함께 설명하여 학습에 기여합니다.\n\n⸻\n\n🧾 리뷰 포맷\n\t•\t언어: 한국어\n\t•\t형식: Markdown\n\t•\t스타일: 명확하고 간결하며 진심 담긴 설명\n\t•\t이모지: ✨, ⚠️, 💡 등으로 핵심 포인트 강조\n\t•\t코드: 개선 제안 시 TypeScript 기반의 코드 예시 포함\n\n⸻\n\n🔍 리뷰 체크리스트\n\n🔧 React/JSX\n\t•\t컴포넌트 분리 및 책임 원칙 (SRP)\n\t•\t상태 및 props 관리 방식 (useState, useReducer, 전역 상태 등)\n\t•\t렌더링 최적화 (memo, useCallback, useMemo)\n\t•\t사이드 이펙트 처리 (useEffect의 의존성 배열 및 정리 함수)\n\t•\t조건부 렌더링 가독성\n\t•\t오류 처리 흐름 (ErrorBoundary, fallback UI 등)\n\n🔐 TypeScript\n\t•\t타입 정의 명확성 및 재사용성\n\t•\t타입 추론 vs 명시적 선언 균형\n\t•\t제네릭, 유니온, 인터섹션 타입 활용\n\t•\t타입 안전성 보장 (any 최소화, 좁히기 등)\n\n🎨 Tailwind CSS\n\t•\t클래스 구성의 명확성\n\t•\t중복 유틸리티 최소화 (@apply 및 컴포넌트화)\n\t•\t반응형 및 상태 기반 클래스 처리 (hover:, sm: 등)\n\t•\t디자인 시스템 기반 컬러/타이포/여백 일관성\n\n🚀 성능 최적화\n\t•\t불필요한 렌더링 방지\n\t•\t무거운 연산의 메모이제이션\n\t•\t코드 스플리팅 (next/dynamic, React.lazy)\n\t•\t클린업 없는 사이드 이펙트 방지 (useEffect 메모리 누수 등)\n\n♿️ 접근성 (a11y)\n\t•\tARIA 속성 활용\n\t•\t키보드 네비게이션 보장\n\t•\t색상 대비 및 시각적 가독성\n\t•\t스크린 리더 호환성 고려\n⸻\n\n🎁 리뷰 시 항상 포함되는 추가 제안\n\n항목\t설명\n💡 대안 코드 예시\t현재 구조보다 더 나은 방향의 코드 예시를 TypeScript로 제공합니다.\n🛠️ 리팩토링 방향 제안\t로직 분리, 커스텀 훅 활용, 컨테이너/프리젠테이션 분리 등 실무에 적합한 개선 방향을 제시합니다.\n📚 참고 링크 / 문서\t공식 문서, 블로그 글, 실무 사례 등 학습에 도움이 될만한 링크를 공유합니다.\n🔄 컨벤션 정리\t반복적으로 발생할 수 있는 팀 내 코드 스타일이나 네이밍 이슈는 컨벤션 제안으로 정리합니다.\n\n📊 코드 평가 점수는 100점 만점 기준으로 다음 형식으로 표시해 주세요:\n\n📊 코드 평가 점수: {점수}점 / 100\"\n\n⸻\n\n💬 예시 리뷰 톤\n\n### ✅ 전반적인 피드백  \n\n컴포넌트의 구조가 깔끔하고, 상태 흐름도 잘 정리되어 있어 유지보수성이 높습니다. 특히 `useEffect`의 정리 함수 처리가 인상적입니다 👏  \n다만, `props` 전달 방식이 약간 과도하게 중첩되어 있어 간단한 리팩토링으로 더 명확해질 수 있습니다.\n\n---\n\n### ⚠️ 개선 포인트\n\n1. **컴포넌트 분리 부족**\n   - `Modal` 내에서 너무 많은 로직이 함께 처리되고 있습니다.\n   - → `useModalState` 커스텀 훅으로 분리하면 테스트성과 재사용성이 증가합니다.\n\n---\n\n### 💡 개선 제안\n\n```tsx\n// useModalState.ts\nexport const useModalState = () => {\n  const [isOpen, setOpen] = useState(false);\n  return {\n    isOpen,\n    open: () => setOpen(true),\n    close: () => setOpen(false),\n  };\n};\n\n\n⸻\n\n📚 참고 링크 예시\n\t•\tReact 공식 - 훅의 추출\n\t•\tKent C. Dodds - UI 상태 관리 전략\n⸻\n\n⸻\n\n🔄 팀 컨벤션 제안 예시\n\n현재 props 명명 규칙이 컴포넌트마다 달라 가독성이 떨어질 수 있습니다.\n→ onXxx, isXxx 패턴으로 정리해보면 어떨까요?\n\n📊 코드 평가 점수: 78점 / 100"}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[1080,600],"id":"d7f87328-cd71-40fe-9e4a-cf6107f697bc","name":"AI Agent"},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"conditions":[{"id":"b693272c-654f-42c7-9e54-11fbd77ca5e7","leftValue":"={{ $('Webhook').item.json.body.action }}","rightValue":"opened","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}},{"id":"57dc9166-fd2a-4ecf-9e20-95605a3a5afd","leftValue":"={{ $('Webhook').item.json.body.action }}","rightValue":"reopened","operator":{"type":"string","operation":"equals","name":"filter.operator.equals"}}],"combinator":"or"},"options":{}},"id":"c7466a6c-4129-4694-835b-5774339a6be6","name":"Is PR Review Needed","type":"n8n-nodes-base.if","position":[-460,920],"typeVersion":2.2},{"parameters":{"url":"=https://api.github.com/repos/{{ $('Webhook').item.json.body.repository.full_name }}/pulls/{{ $('Webhook').item.json.body.pull_request.number }}/files","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept","value":"application/vnd.github.v3+json"},{"name":"Authorization","value":"=Bearer {{$node[\"Get COLO Variables\"].json.github_auth}}"}]},"options":{}},"id":"2a19a9e2-a953-4af2-9d39-3123ac135c51","name":"Get PR Files Change","type":"n8n-nodes-base.httpRequest","position":[-20,920],"typeVersion":4.2},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"loose","version":2},"conditions":[{"id":"501623a9-9515-4034-bb13-a5a6a4f924eb","operator":{"type":"string","operation":"isNotEmpty"},"leftValue":"={{ $json.patch }}","rightValue":""},{"id":"f2928260-ef04-47cb-9c36-432e29fe52d1","leftValue":"={{ $json.changes }}","rightValue":20,"operator":{"type":"number","operation":"gte"}}],"combinator":"or"},"looseTypeValidation":true,"options":{"ignoreCase":false}},"id":"c23427dc-0ecb-4820-a40d-2d10fd4678a3","name":"Skip File Change","type":"n8n-nodes-base.if","position":[420,600],"typeVersion":2.2},{"parameters":{"method":"POST","url":"=https://api.github.com/repos/{{ $('Webhook').item.json.body.repository.full_name }}/pulls/{{ $('Webhook').item.json.body.pull_request.number }}/comments","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Accept","value":"application/vnd.github.v3+json"},{"name":"Authorization","value":"=Bearer {{$node[\"Get COLO Variables\"].json.github_auth}}"}]},"sendBody":true,"bodyParameters":{"parameters":[{"name":"body","value":"={{ $('Process GPT Review').item.json.review }}"},{"name":"commit_id","value":"={{ $('Webhook').item.json.body.pull_request.head.sha }}"},{"name":"path","value":"={{ $('Loop').item.json.filename }}"},{"name":"line","value":"={{ $('Parse Last Diff Line').item.json.lastNewLine || $('Parse Last Diff Line').item.json.lastOldLine || 1 }}"},{"name":"side","value":"={{ $('Parse Last Diff Line').item.json.lastNewLine ? 'RIGHT' : 'LEFT' }}"}]},"options":{}},"id":"b48d9e51-d5c9-41de-883c-389b7b837fe6","name":"Post PR Comment","type":"n8n-nodes-base.httpRequest","position":[1900,800],"typeVersion":4.2},{"parameters":{"options":{}},"type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[200,920],"id":"5b2266db-4bdb-4e35-8c5d-16cb9c1fe24c","name":"Loop"},{"parameters":{"mode":"runOnceForEachItem","jsCode":"var diff = $input.item.json.gitDiff || ''\n\nlet lines = diff.trimEnd().split('\\n');\n\nlet originalCode = '';\nlet newCode = '';\n\nlines.forEach(line => {\n    if (line.startsWith('-')) {\n        originalCode += line.substring(1) + \"\\n\";\n    } else if (line.startsWith('+')) {\n        newCode += line.substring(1) + \"\\n\";\n    } else if (!line.startsWith('@')) {\n        originalCode += line + \"\\n\";\n        newCode += line + \"\\n\";\n    }\n});\n\nconst codeObj = {\n  originalCode: originalCode,\n  newCode: newCode\n};\n\nreturn codeObj\n"},"id":"73ea0367-4207-4651-a8a3-4206483c6a11","name":"Code","type":"n8n-nodes-base.code","position":[860,600],"typeVersion":2},{"parameters":{"workflowId":{"__rl":true,"value":"uGqCptWtD45pUJt4","mode":"list","cachedResultName":"[COLO] (Sub) Get COLO Variables"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-240,920],"id":"d55390cb-60b6-41ba-b48c-2b1ce2e9f073","name":"Get COLO Variables"},{"parameters":{"jsCode":"var review = $input.item.json.output || '';\n\n// 정규식: 다양한 표현 대응 (굵게, 콜론, 이모지, 공백)\nvar scoreMatch = review.match(/(?:📊\\s*)?(?:\\*\\*)?코드\\s*평가\\s*점수(?:\\*\\*)?[:：]?\\s*(\\d+)/);\n\nvar score = scoreMatch ? parseInt(scoreMatch[1], 10) : 0;\n\n// 점수 앞까지만 잘라내기\nvar trimmedReview = review.split(/(?:📊\\s*)?(?:\\*\\*)?코드\\s*평가\\s*점수(?:\\*\\*)?[:：]/)[0].trim();\n\nreturn [\n  {\n    json: {\n      score: score,\n      review: trimmedReview\n    }\n  }\n];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1460,600],"id":"4879e773-8e64-4dad-bcd7-ea4bcc6195ae","name":"Process GPT Review"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"8ab43db0-3e45-4ce0-8658-34d2d53fe6ac","leftValue":"={{ $json.score }}","rightValue":80,"operator":{"type":"number","operation":"lt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1680,720],"id":"d16f043f-88dd-4e26-a68c-93ad97dffb77","name":"If GPT Review Needed"}],"connections":{"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Parse Last Diff Line":{"main":[[{"node":"Code","type":"main","index":0}]]},"Webhook":{"main":[[{"node":"Is PR Review Needed","type":"main","index":0}]]},"AI Agent":{"main":[[{"node":"Process GPT Review","type":"main","index":0}]]},"Is PR Review Needed":{"main":[[{"node":"Get COLO Variables","type":"main","index":0}]]},"Get PR Files Change":{"main":[[{"node":"Loop","type":"main","index":0}]]},"Skip File Change":{"main":[[{"node":"Parse Last Diff Line","type":"main","index":0}],[{"node":"Loop","type":"main","index":0}]]},"Post PR Comment":{"main":[[{"node":"Loop","type":"main","index":0}]]},"Loop":{"main":[[],[{"node":"Skip File Change","type":"main","index":0}]]},"Code":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Get COLO Variables":{"main":[[{"node":"Get PR Files Change","type":"main","index":0}]]},"Process GPT Review":{"main":[[{"node":"If GPT Review Needed","type":"main","index":0}]]},"If GPT Review Needed":{"main":[[{"node":"Post PR Comment","type":"main","index":0}],[{"node":"Loop","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"545dda4b-5da7-4028-9aa5-613dbb501809","triggerCount":1,"tags":[]}