{"createdAt":"2025-04-16T04:22:08.092Z","updatedAt":"2025-04-24T01:49:06.000Z","id":"4mvHVAF3QOFaqLZT","name":"PMS Bot Jira 작업현황","active":true,"nodes":[{"parameters":{"select":"channel","channelId":{"__rl":true,"value":"C08BBCYDV4M","mode":"list","cachedResultName":"engineering_pms"},"messageType":"block","blocksUi":"={{ $json }}","text":"= ","otherOptions":{}},"type":"n8n-nodes-base.slack","typeVersion":2.3,"position":[660,0],"id":"2f3553e7-994b-4132-97a1-4427afa21a48","name":"Slack","webhookId":"9fe89c7c-b2e2-4562-8c45-c603b997a890","credentials":{"slackApi":{"id":"Bqw9EwOIkH7skn99","name":"PMS BOT"}}},{"parameters":{"rule":{"interval":[{"field":"weeks","triggerAtDay":[1,2,3,4,5],"triggerAtHour":9}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[0,0],"id":"df555a2d-6360-4cf1-864d-9412de584355","name":"09:00 Trigger"},{"parameters":{"operation":"getAll","returnAll":true,"options":{"jql":"assignee IN (currentUser(), \"김재한\", \"김상현\") AND issuetype IN (Story, Bug) AND statusCategory != Done"}},"id":"8d0b159c-c8e3-4d68-abfe-c160b22bbb81","name":"Get PMS Developer Jira Issues","type":"n8n-nodes-base.jira","position":[220,0],"typeVersion":1,"credentials":{"jiraSoftwareCloudApi":{"id":"jd9f8LcXIUpGLHG7","name":"Colo Developjik1 Jira SW Cloud account"}}},{"parameters":{"jsCode":"// 데이터 가져오기\nconst items = $input.all();\nlet jiraIssues = [];\n\n// 모든 아이템의 json 속성에서 이슈 데이터 수집\nif (items && items.length > 0) {\n  items.forEach(item => {\n    if (item.json) {\n      jiraIssues.push(item.json);\n    }\n  });\n}\n\n// JIRA 도메인 설정 (링크용)\nconst JIRA_DOMAIN = 'https://colosseum.atlassian.net/';\n\n// 상태별 분류\nconst inProgressIssues = jiraIssues.filter(issue => \n  issue.fields && \n  issue.fields.statusCategory && \n  issue.fields.statusCategory.key === 'indeterminate'\n);\nconst todoIssues = jiraIssues.filter(issue => \n  issue.fields && \n  issue.fields.statusCategory && \n  issue.fields.statusCategory.key === 'new'\n);\n\n// 날짜 포맷팅\nconst today = new Date();\nconst formattedDate = `${today.getFullYear()}년 ${today.getMonth() + 1}월 ${today.getDate()}일`;\n\n// 우선순위 이모지 매핑\nconst priorityEmojis = {\n  'Highest': '🔴',\n  'High': '🟠',\n  'Medium': '🟡',\n  'Low': '🟢',\n  'Lowest': '🔵'\n};\n\n// 이슈 타입 이모지 매핑\nconst issueTypeEmojis = {\n  'Bug': '🐞',\n  'Story': '📝',\n  'Task': '✅',\n  'Epic': '🏆',\n  'Sub-task': '📎'\n};\n\n// Slack Block Kit 메시지 생성\nconst blocks = [\n  // 헤더 섹션\n  {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": `📊 JIRA 작업 현황 보고 (${formattedDate} 기준)`,\n      \"emoji\": true\n    }\n  },\n  { \"type\": \"divider\" },\n  \n  // 진행 중인 작업 섹션\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": `*🔶 진행 중인 작업 (IN PROGRESS)* - 총 ${inProgressIssues.length}건`\n    }\n  }\n];\n\n// 진행 중인 작업 목록 추가\nif (inProgressIssues.length === 0) {\n  blocks.push({\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"📭 진행 중인 작업이 없습니다.\"\n    }\n  });\n} else {\n  inProgressIssues.forEach((issue, index) => {\n    const issueType = issue.fields.issuetype ? issue.fields.issuetype.name : 'Task';\n    const typeEmoji = issueTypeEmojis[issueType] || '📄';\n    const priorityEmoji = issue.fields.priority && issue.fields.priority.name ? \n      (priorityEmojis[issue.fields.priority.name] || '⚪️') : '⚪️';\n    \n    // 이슈 제목과 링크  \n    blocks.push({\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": `*${index+1}.* ${typeEmoji} ${priorityEmoji} *<${JIRA_DOMAIN}/browse/${issue.key}|${issue.key}>: ${issue.fields.summary}*`\n      }\n    });\n    \n    // 상태, 우선순위, 담당자 정보를 한 줄에 깔끔하게\n    const fields = [];\n    \n    // 상태 정보\n    fields.push({\n      \"type\": \"mrkdwn\",\n      \"text\": `*상태:* ${issue.fields.status.name}`\n    });\n    \n    // 우선순위 정보\n    if (issue.fields.priority && issue.fields.priority.name) {\n      fields.push({\n        \"type\": \"mrkdwn\",\n        \"text\": `*우선순위:* ${issue.fields.priority.name}`\n      });\n    }\n    \n    // 담당자 정보\n    if (issue.fields.assignee && issue.fields.assignee.displayName) {\n      fields.push({\n        \"type\": \"mrkdwn\",\n        \"text\": `*담당자:* ${issue.fields.assignee.displayName}`\n      });\n    }\n    \n    blocks.push({\n      \"type\": \"context\",\n      \"elements\": fields\n    });\n    \n    // 만약 해당 이슈에 설명이 있다면 짧게 표시 (옵션)\n    if (issue.fields.description) {\n      let desc = issue.fields.description;\n      if (desc.length > 100) {\n        desc = desc.substring(0, 97) + '...';\n      }\n      blocks.push({\n        \"type\": \"context\",\n        \"elements\": [\n          {\n            \"type\": \"mrkdwn\",\n            \"text\": `💬 ${desc}`\n          }\n        ]\n      });\n    }\n    \n    // 마지막 항목이 아니면 구분선 추가\n    if (index < inProgressIssues.length - 1) {\n      blocks.push({ \"type\": \"divider\" });\n    }\n  });\n}\n\n// 할 작업 섹션 헤더\nblocks.push(\n  { \"type\": \"divider\" },\n  {\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": `*🔷 앞으로 할 작업 (TO DO)* - 총 ${todoIssues.length}건`\n    }\n  }\n);\n\n// 할 작업 목록 추가\nif (todoIssues.length === 0) {\n  blocks.push({\n    \"type\": \"section\",\n    \"text\": {\n      \"type\": \"mrkdwn\",\n      \"text\": \"📭 할 작업이 없습니다.\"\n    }\n  });\n} else {\n  todoIssues.forEach((issue, index) => {\n    const issueType = issue.fields.issuetype ? issue.fields.issuetype.name : 'Task';\n    const typeEmoji = issueTypeEmojis[issueType] || '📄';\n    const priorityEmoji = issue.fields.priority && issue.fields.priority.name ? \n      (priorityEmojis[issue.fields.priority.name] || '⚪️') : '⚪️';\n    \n    // 이슈 제목과 링크\n    blocks.push({\n      \"type\": \"section\",\n      \"text\": {\n        \"type\": \"mrkdwn\",\n        \"text\": `*${index+1}.* ${typeEmoji} ${priorityEmoji} *<${JIRA_DOMAIN}/browse/${issue.key}|${issue.key}>: ${issue.fields.summary}*`\n      }\n    });\n    \n    // 상태, 우선순위, 담당자 정보를 한 줄에 깔끔하게\n    const fields = [];\n    \n    // 상태 정보\n    fields.push({\n      \"type\": \"mrkdwn\",\n      \"text\": `*상태:* ${issue.fields.status.name}`\n    });\n    \n    // 우선순위 정보\n    if (issue.fields.priority && issue.fields.priority.name) {\n      fields.push({\n        \"type\": \"mrkdwn\",\n        \"text\": `*우선순위:* ${issue.fields.priority.name}`\n      });\n    }\n    \n    // 담당자 정보\n    if (issue.fields.assignee && issue.fields.assignee.displayName) {\n      fields.push({\n        \"type\": \"mrkdwn\",\n        \"text\": `*담당자:* ${issue.fields.assignee.displayName}`\n      });\n    }\n    \n    blocks.push({\n      \"type\": \"context\",\n      \"elements\": fields\n    });\n    \n    // 만약 해당 이슈에 마감일이 있다면 표시\n    if (issue.fields.duedate) {\n      const dueDate = new Date(issue.fields.duedate);\n      const formattedDueDate = `${dueDate.getFullYear()}-${(dueDate.getMonth() + 1).toString().padStart(2, '0')}-${dueDate.getDate().toString().padStart(2, '0')}`;\n      \n      blocks.push({\n        \"type\": \"context\",\n        \"elements\": [\n          {\n            \"type\": \"mrkdwn\",\n            \"text\": `⏰ *마감일:* ${formattedDueDate}`\n          }\n        ]\n      });\n    }\n    \n    // 마지막 항목이 아니면 구분선 추가\n    if (index < todoIssues.length - 1) {\n      blocks.push({ \"type\": \"divider\" });\n    }\n  });\n}\n\n// 요약 정보 섹션\nblocks.push(\n  { \"type\": \"divider\" },\n  {\n    \"type\": \"header\",\n    \"text\": {\n      \"type\": \"plain_text\",\n      \"text\": \"📌 요약\",\n      \"emoji\": true\n    }\n  },\n  {\n    \"type\": \"section\",\n    \"fields\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": `*전체 작업:*\\n${jiraIssues.length}건`\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": `*진행 중:*\\n${inProgressIssues.length}건`\n      },\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": `*할 작업:*\\n${todoIssues.length}건`\n      }\n    ]\n  },\n  // 바닥글 - 보고서 생성 시간\n  {\n    \"type\": \"context\",\n    \"elements\": [\n      {\n        \"type\": \"mrkdwn\",\n        \"text\": `⏱️ 보고서 생성 시간: ${new Date().toLocaleTimeString()}`\n      }\n    ]\n  }\n);\n\n// 결과 반환\nreturn { blocks };"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[440,0],"id":"6d59d161-34fb-4ed4-a083-83a25fe67d85","name":"Jira To Slack Message"},{"parameters":{"content":"📆 JIRA 작업 현황 자동 보고 워크플로우 📊\n\n이 n8n 워크플로우는 매일 아침 9시에 자동으로 JIRA 작업 현황을 수집하여\nSlack 엔지니어링 채널에 보고서를 전송합니다.\n\n🔹 주요 구성 요소:\n  ⏰ 09:00 트리거: 평일 아침 9시에 워크플로우 실행\n  🔍 JIRA 검색: 특정 담당자들의 미완료 작업(Story, Bug) 조회\n  💻 코드 노드: JIRA 데이터를 Slack 메시지 형식으로 변환\n  📢 Slack 발신: 포맷된 작업 현황 보고서를 채널에 전송\n\n⚡ 작업 상태 구분:\n  🔶 IN PROGRESS - 진행 중인 작업\n  🔷 TO DO - 앞으로 할 작업\n\n🎯 우선순위 표시:\n  🔴 Highest  🟠 High  🟡 Medium  🟢 Low  🔵 Lowest","height":520,"width":1200},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[-220,-360],"id":"518d00a1-2ab2-4220-bcb8-82ebf6feb6de","name":"Sticky Note"}],"connections":{"09:00 Trigger":{"main":[[{"node":"Get PMS Developer Jira Issues","type":"main","index":0}]]},"Get PMS Developer Jira Issues":{"main":[[{"node":"Jira To Slack Message","type":"main","index":0}]]},"Jira To Slack Message":{"main":[[{"node":"Slack","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":{"node:Schedule Trigger":{"recurrenceRules":[]},"node:09:00 Schedule Trigger":{"recurrenceRules":[]},"node:17:00 Schedule Trigger":{"recurrenceRules":[]},"node:09:00 Trigger":{"recurrenceRules":[]}},"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"1ccda6b6-eb3d-48c4-81dd-23e0c130942f","triggerCount":1,"tags":[],"safeName":"PMS Bot Jira 작업현황"}