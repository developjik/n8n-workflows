{"createdAt":"2025-04-24T04:48:00.094Z","updatedAt":"2025-04-24T08:31:52.000Z","id":"OclfEC601u8Bi9Sf","name":"GitHub PR Opened & Closed Slack Notification","active":true,"nodes":[{"parameters":{"httpMethod":"POST","path":"pr-closed-slack-notification","options":{}},"id":"767cfac0-ec2f-4118-94b1-f04a82d31a6b","name":"Webhook","type":"n8n-nodes-base.webhook","position":[480,1000],"webhookId":"78214945-1731-46ca-a13f-132df9ee1d14","typeVersion":2},{"parameters":{"select":"channel","channelId":{"__rl":true,"value":"C087DUKSY1F","mode":"list","cachedResultName":"pms-frontend-slack-bot"},"messageType":"block","blocksUi":"={{ $json }}","text":"= ","otherOptions":{}},"type":"n8n-nodes-base.slack","typeVersion":2.3,"position":[1360,900],"id":"33c21e00-03f6-4f68-8cb6-72097bb403c0","name":"Slack (Merged)","webhookId":"f1782268-9699-4024-8493-124935e18a4f","credentials":{"slackApi":{"id":"Bqw9EwOIkH7skn99","name":"PMS BOT"}}},{"parameters":{"jsCode":"const response = $node[\"Globals\"].json.response\nconst pr = response.body.pull_request;\nconst repo =response.body.repository;\nconst sender = response.body.sender || {};\n\n// PR 병합 시간을 읽기 쉬운 형식으로 변환\nconst formatDate = (dateString) => {\n  if (!dateString) return 'N/A';\n  const date = new Date(dateString);\n  return date.toLocaleString('ko-KR', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  });\n};\n\n// 타입 확인하여 null/undefined 값 처리\nconst safeValue = (value) => value || 'N/A';\n\n// PR 생성부터 병합까지 걸린 시간 계산\nconst calculateTimeToMerge = (createdAt, mergedAt) => {\n  if (!createdAt || !mergedAt) return 'N/A';\n  \n  const created = new Date(createdAt);\n  const merged = new Date(mergedAt);\n  const diffMs = merged - created;\n  \n  // 24시간 미만인 경우 시간:분 형식\n  if (diffMs < 86400000) {\n    const hours = Math.floor(diffMs / 3600000);\n    const minutes = Math.floor((diffMs % 3600000) / 60000);\n    return `${hours}시간 ${minutes}분`;\n  } \n  // 24시간 이상인 경우 일:시간 형식\n  else {\n    const days = Math.floor(diffMs / 86400000);\n    const hours = Math.floor((diffMs % 86400000) / 3600000);\n    return `${days}일 ${hours}시간`;\n  }\n};\n\n// 브랜치 정보 추출\nconst baseBranch = pr.base?.ref || 'N/A';\nconst headBranch = pr.head?.ref || 'N/A';\n\n// PR 설명에서 Jira 티켓 ID 추출 (PROJ-123 형식)\nconst extractJiraTickets = (body) => {\n  if (!body) return [];\n  \n  const regex = /([A-Z]+-\\d+)/g;\n  const matches = body.match(regex) || [];\n  return [...new Set(matches)]; // 중복 제거\n};\n\n// 병합한 사람 정보 확인 (병합한 사람이 PR 작성자와 다를 수 있음)\nconst mergedBy = pr.merged_by?.login || sender.login || 'N/A';\n\n// Jira 티켓 ID 추출\nconst jiraTickets = extractJiraTickets(pr.body);\n\n// JIRA 티켓 링크 생성 (회사의 JIRA 도메인을 사용하세요)\nconst jiraBaseUrl = 'https://your-company.atlassian.net/browse/';\nconst jiraLinks = jiraTickets.map(ticket => \n  `<${jiraBaseUrl}${ticket}|${ticket}>`\n).join(', ');\n\n// PR 설명 요약 (너무 길면 자름)\nconst bodyPreview = pr.body ? \n  (pr.body.length > 100 ? pr.body.substring(0, 100) + '...' : pr.body) : \n  '설명 없음';\n\n// PR 라벨 추출\nconst labels = pr.labels && pr.labels.length > 0 ? \n  pr.labels.map(label => label.name).join(', ') : \n  '없음';\n\n// 배포가 필요한지 여부를 체크하는 함수 (예: 특정 브랜치로의 병합 확인)\nconst needsDeployment = () => {\n  const deployBranches = ['main', 'master', 'production', 'staging'];\n  return deployBranches.includes(baseBranch);\n};\n\nreturn {\n  blocks: [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: `🎉 ${repo.name} PR 병합 완료 🎉`,\n        emoji: true \n      }\n    },\n    {\n      type: 'divider'\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*리포지토리:*\\n${safeValue(repo.full_name)}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*PR 번호:*\\n#${safeValue(pr.number)}`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*브랜치:*\\n${headBranch} → ${baseBranch}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*라벨:*\\n${labels}`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*작성자:*\\n${safeValue(pr.user.login)}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*병합자:*\\n${mergedBy}`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*제목:*\\n${safeValue(pr.title)}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*병합 시각:*\\n${formatDate(pr.merged_at)}`\n        }\n      ]\n    },\n    ...(jiraTickets.length > 0 ? [\n      {\n        type: 'section',\n        fields: [\n          {\n            type: 'mrkdwn',\n            text: `*연관 티켓:*\\n${jiraLinks}`\n          },\n          {\n            type: 'mrkdwn',\n            text: `*소요 시간:*\\n${calculateTimeToMerge(pr.created_at, pr.merged_at)}`\n          }\n        ]\n      }\n    ] : []),\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*설명:*\\n>${bodyPreview.replace(/\\n/g, '\\n>')}`\n      }\n    },\n    {\n      type: 'actions',\n      elements: [\n        {\n          type: 'button',\n          text: {\n            type: 'plain_text',\n            text: '🔗 PR 상세 보기',\n            emoji: true\n          },\n          url: pr.html_url\n        },\n        ...(jiraTickets.length > 0 ? [\n          {\n            type: 'button',\n            text: {\n              type: 'plain_text',\n              text: '🎟️ JIRA 이슈 보기',\n              emoji: true\n            },\n            url: `${jiraBaseUrl}${jiraTickets[0]}`\n          }\n        ] : []),\n        ...(needsDeployment() ? [\n          {\n            type: 'button',\n            text: {\n              type: 'plain_text',\n              text: '🚀 배포 필요',\n              emoji: true\n            },\n            style: 'danger',\n            url: `${repo.html_url}/actions`\n          }\n        ] : [])\n      ]\n    },\n    {\n      type: 'divider'\n    },\n    {\n      type: 'context',\n      elements: [\n        {\n          type: 'mrkdwn',\n          text: `변경된 파일: ${safeValue(pr.changed_files)} | 추가: ${safeValue(pr.additions)} | 삭제: ${safeValue(pr.deletions)}`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: needsDeployment() \n          ? '<!here> PR이 성공적으로 병합되었습니다. *배포 작업이 필요합니다.*'\n          : '<!here> PR이 성공적으로 병합되었습니다.'\n      }\n    }\n  ]\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1140,900],"id":"be7fa100-ea19-487a-b92d-10b5528e5b1d","name":"Code (Merged)"},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"conditions":[{"id":"a1b2c3d4-e5f6-7890-abcd-ef1234567890","operator":{"name":"filter.operator.equals","type":"string","operation":"equals"},"leftValue":"={{$node[\"Globals\"].json.response.body.action}}","rightValue":"opened"}],"combinator":"and"},"options":{}},"name":"PR Opened Check","type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1140,1100],"id":"bafb7d21-c26a-4ece-9447-b3e235e900b7"},{"parameters":{"jsCode":"const resposne = $node[\"Globals\"].json.response\nconst pr = resposne.body.pull_request;\nconst repo = resposne.body.repository;\nconst sender = resposne.body.sender || {};\n\n// 날짜 포맷팅 함수\nconst formatDate = (dateString) => {\n  if (!dateString) return 'N/A';\n  const date = new Date(dateString);\n  return date.toLocaleString('ko-KR', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false\n  });\n};\n\n// 안전한 값 처리\nconst safeValue = (value) => value || 'N/A';\n\n// 브랜치 정보 추출\nconst baseBranch = pr.base?.ref || 'N/A';\nconst headBranch = pr.head?.ref || 'N/A';\n\n// PR 설명에서 Jira 티켓 ID 추출 (PROJ-123 형식)\nconst extractJiraTickets = (body) => {\n  if (!body) return [];\n  \n  const regex = /([A-Z]+-\\d+)/g;\n  const matches = body.match(regex) || [];\n  return [...new Set(matches)]; // 중복 제거\n};\n\n// Jira 티켓 ID 추출\nconst jiraTickets = extractJiraTickets(pr.body);\n\n// JIRA 티켓 링크 생성 \nconst jiraBaseUrl = $node[\"Globals\"].json[\"jiraBaseUrl\"]\nconst jiraLinks = jiraTickets.map(ticket => \n  `<${jiraBaseUrl}${ticket}|${ticket}>`\n).join(', ');\n\n// PR 설명 요약 (너무 길면 자름)\nconst bodyPreview = pr.body ? \n  (pr.body.length > 100 ? pr.body.substring(0, 100) + '...' : pr.body) : \n  '설명 없음';\n\n// PR 라벨 추출\nconst labels = pr.labels && pr.labels.length > 0 ? \n  pr.labels.map(label => label.name).join(', ') : \n  '없음';\n\n// 리뷰어 목록 추출\nconst requestedReviewers = pr.requested_reviewers && pr.requested_reviewers.length > 0 ?\n  pr.requested_reviewers.map(reviewer => reviewer.login).join(', ') :\n  '없음';\n\n// 변경 규모 분석\nconst changesSize = () => {\n  const additions = pr.additions || 0;\n  const deletions = pr.deletions || 0;\n  const total = additions + deletions;\n  \n  if (total < 50) return '🟢 작은 변경 (< 50줄)';\n  if (total < 300) return '🟡 중간 변경 (< 300줄)';\n  return '🔴 큰 변경 (300줄 이상)';\n};\n\n// 수정된 파일 유형 추출 (예시: .js, .css 등)\nconst getFileTypes = () => {\n  if (!pr.changed_files || !pr.files) return '정보 없음';\n  \n  try {\n    // 이 부분은 PR 페이로드에 files 배열이 있는 경우에만 작동\n    if (pr.files && Array.isArray(pr.files)) {\n      const extensions = pr.files\n        .map(file => {\n          const match = file.filename.match(/\\.([^.]+)$/);\n          return match ? match[1] : 'etc';\n        })\n        .filter((value, index, self) => self.indexOf(value) === index); // 중복 제거\n      \n      return extensions.join(', ') || '정보 없음';\n    }\n    return '정보 없음';\n  } catch (e) {\n    return '정보 추출 실패';\n  }\n};\n\n// 우선순위 결정 (라벨에 priority 또는 우선순위가 있는 경우)\nconst getPriority = () => {\n  if (!pr.labels || !Array.isArray(pr.labels)) return null;\n  \n  const priorityLabel = pr.labels.find(label => \n    label.name.toLowerCase().includes('priority') || \n    label.name.toLowerCase().includes('우선순위')\n  );\n  \n  return priorityLabel ? priorityLabel.name : null;\n};\n\n// 주요 브랜치 여부 확인\nconst isImportantBranch = () => {\n  const importantBranches = ['main', 'master', 'develop', 'production', 'staging'];\n  return baseBranch && importantBranches.includes(baseBranch);\n};\n\nreturn {\n  blocks: [\n    {\n      type: 'header',\n      text: {\n        type: 'plain_text',\n        text: `🆕 ${repo.name} 새 PR 생성됨`,\n        emoji: true \n      }\n    },\n    {\n      type: 'divider'\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*리포지토리:*\\n${safeValue(repo.full_name)}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*PR 번호:*\\n#${safeValue(pr.number)}`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*브랜치:*\\n${headBranch} → ${baseBranch}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*작성자:*\\n${safeValue(pr.user.login)}`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*제목:*\\n${safeValue(pr.title)}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*생성 시각:*\\n${formatDate(pr.created_at)}`\n        }\n      ]\n    },\n    ...(jiraTickets.length > 0 ? [\n      {\n        type: 'section',\n        fields: [\n          {\n            type: 'mrkdwn',\n            text: `*연관 티켓:*\\n${jiraLinks}`\n          },\n          {\n            type: 'mrkdwn',\n            text: `*라벨:*\\n${labels}`\n          }\n        ]\n      }\n    ] : []),\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: `*설명:*\\n>${bodyPreview.replace(/\\n/g, '\\n>')}`\n      }\n    },\n    {\n      type: 'section',\n      fields: [\n        {\n          type: 'mrkdwn',\n          text: `*요청된 리뷰어:*\\n${requestedReviewers}`\n        },\n        {\n          type: 'mrkdwn',\n          text: `*변경 규모:*\\n${changesSize()}`\n        }\n      ]\n    },\n    {\n      type: 'actions',\n      elements: [\n        {\n          type: 'button',\n          text: {\n            type: 'plain_text',\n            text: '🔍 PR 리뷰하기',\n            emoji: true\n          },\n          url: pr.html_url,\n          style: 'primary'\n        },\n        ...(jiraTickets.length > 0 ? [\n          {\n            type: 'button',\n            text: {\n              type: 'plain_text',\n              text: '🎟️ JIRA 이슈 보기',\n              emoji: true\n            },\n            url: `${jiraBaseUrl}${jiraTickets[0]}`\n          }\n        ] : [])\n      ]\n    },\n    {\n      type: 'divider'\n    },\n    {\n      type: 'context',\n      elements: [\n        {\n          type: 'mrkdwn',\n          text: `파일 수: ${safeValue(pr.changed_files)} | 추가: ${safeValue(pr.additions)}줄 | 삭제: ${safeValue(pr.deletions)}줄`\n        }\n      ]\n    },\n    {\n      type: 'section',\n      text: {\n        type: 'mrkdwn',\n        text: isImportantBranch() \n          ? '<!here> 중요 브랜치에 대한 새로운 PR이 생성되었습니다. 리뷰가 필요합니다.'\n          : '새로운 PR이 생성되었습니다. 리뷰를 부탁드립니다.'\n      }\n    }\n  ]\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1360,1100],"id":"9a0fcfb1-120a-4356-9b93-f8afbd0955f1","name":"Code (Opened)"},{"parameters":{"select":"channel","channelId":{"__rl":true,"value":"C087DUKSY1F","mode":"list","cachedResultName":"pms-frontend-slack-bot"},"messageType":"block","blocksUi":"={{ $json }}","text":"= ","otherOptions":{}},"type":"n8n-nodes-base.slack","typeVersion":2.3,"position":[1580,1100],"id":"3f137b4c-3291-4f2b-acc2-e09f67539c48","name":"Slack (Opened)","webhookId":"f1782268-9699-4024-8493-124935e18a4f","credentials":{"slackApi":{"id":"Bqw9EwOIkH7skn99","name":"PMS BOT"}}},{"parameters":{"conditions":{"options":{"version":2,"leftValue":"","caseSensitive":true,"typeValidation":"strict"},"conditions":[{"id":"987ab2c5-dd4b-4e28-b533-0c32ea6ca982","operator":{"name":"filter.operator.equals","type":"string","operation":"equals"},"leftValue":"={{ $node[\"Globals\"].json.response.body.action }}","rightValue":"closed"},{"id":"1234abcd-5678-9012-efgh-3456ijk78901","operator":{"name":"filter.operator.equals","type":"boolean","operation":"equals"},"leftValue":"={{ $node[\"Globals\"].json.response.body.pull_request.merged }}","rightValue":true}],"combinator":"and"},"options":{}},"id":"c9327f09-b784-42b7-b075-9efb10b2c51c","name":"PR Closed Check","type":"n8n-nodes-base.if","position":[920,1000],"typeVersion":2.2},{"parameters":{"content":"# GitHub PR 알림 워크플로우 n8n 설명\n\n## 워크플로우 개요\n이 n8n 워크플로우는 GitHub PR 이벤트를 감지하여 Slack으로 알림을 전송합니다. PR이 생성되었을 때와 병합되었을 때 서로 다른 형태의 알림을 제공합니다.\n\n## 주요 구성 요소\n\n### 1. GitHub Webhook\n- **역할**: GitHub에서 PR 이벤트를 수신하는 진입점\n- **설정 경로**: `/github-pr-notification`\n- **주의사항**: GitHub Webhook 설정에서 'Pull request' 이벤트가 활성화되어 있어야 함\n\n### 2. PR 병합 조건 검사\n- **역할**: PR이 닫히고 병합되었는지 확인하는 조건 분기\n- **조건**:\n  - `action = 'closed'`\n  - `pull_request.merged = true`\n- **분기**:\n  - True: PR 병합됨 → 병합 알림 코드로 전달\n  - False: 다른 이벤트 → PR 생성 검사로 전달\n\n### 3. PR 생성 조건 검사\n- **역할**: 새 PR이 생성되었는지 확인\n- **조건**: `action = 'opened'`\n- **분기**:\n  - True: 새 PR 생성됨 → 리뷰 요청 알림 코드로 전달\n  - False: 다른 이벤트 → 워크플로우 종료\n\n### 4. 병합 알림 포맷팅 (Code Merged)\n- **역할**: PR 병합 알림을 위한 데이터 처리 및 Slack 메시지 포맷팅\n- **주요 기능**:\n  - JIRA 티켓 자동 추출 (PR 설명에서 PROJ-123 형식 패턴 찾기)\n  - 병합까지 소요된 시간 계산 (PR 생성부터 병합까지)\n  - 배포 필요 여부 확인 (main, master 등 주요 브랜치 확인)\n  - 변경 파일 수, 추가/삭제 라인 정보 포함\n  - 병합자와 작성자 구분 표시\n\n### 5. PR 생성 알림 포맷팅 (Code Opened)\n- **역할**: 새 PR 알림을 위한 데이터 처리 및 Slack 메시지 포맷팅\n- **주요 기능**:\n  - JIRA 티켓 자동 추출\n  - 리뷰어 목록 수집\n  - 변경 규모 시각화 (🟢 작음 / 🟡 중간 / 🔴 큼)\n  - 중요 브랜치인 경우 <!here> 멘션 추가\n  - PR 리뷰 링크 버튼 제공\n\n### 6. Slack 알림 노드\n- **Slack (Merged)**: 병합 완료 알림을 Slack 채널로 전송\n- **Slack (Opened)**: 새 PR 리뷰 요청 알림을 Slack 채널로 전송\n- **공통 설정**:\n  - 채널: pms-frontend-slack-bot\n  - 포맷: Block Kit 형식\n  - 알림: 중요 이벤트 시 @here 멘션\n\n## 설정 필요 사항\n- JIRA 도메인 URL 변경 필요: `https://your-company.atlassian.net/browse/`\n- 배포 대시보드 URL 변경 필요: `https://your-deploy-dashboard.com/`\n- 중요 브랜치 목록 확인 및 수정: `['main', 'master', 'production', 'staging']`\n\n## 알림 내용\n\n### PR 병합 알림\n- 🎉 [repo 이름] PR 병합 완료 알림\n- 리포지토리 및 PR 번호 정보\n- 브랜치 정보 및 라벨\n- 작성자와 병합자 구분 표시\n- 제목 및 병합 시각\n- 연관 JIRA 티켓 및 소요 시간\n- PR 설명 요약\n- 액션 버튼: PR 상세 보기, JIRA 이슈 보기, 배포 필요 여부\n- 변경된 파일 및 코드 라인 정보\n- 배포 필요 시 강조 알림\n\n### PR 생성 알림\n- 🆕 [repo 이름] 새 PR 생성됨\n- 리포지토리 및 PR 번호 정보\n- 브랜치 정보 및 작성자\n- 제목 및 생성 시각\n- 연관 JIRA 티켓 및 라벨\n- PR 설명 요약\n- 요청된 리뷰어 및 변경 규모\n- 액션 버튼: PR 리뷰하기, JIRA 이슈 보기\n- 파일 수 및 코드 라인 변경 정보\n- 중요 브랜치일 경우 리뷰 요청 강조\n\n이 워크플로우를 통해 개발팀은 PR 활동을 효과적으로 추적하고, 코드 리뷰 프로세스를 간소화하며, 배포가 필요한 중요 병합에 대한 알림을 받을 수 있습니다.","height":2640,"width":1380},"type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[420,-1280],"id":"3e8a209b-ee9f-4d53-81b5-f536902e9470","name":"Sticky Note"},{"parameters":{"assignments":{"assignments":[{"id":"bcd2e47e-4983-4fa4-bbf6-1316ea986417","name":"jiraBaseUrl","value":"https://colosseum.atlassian.net/","type":"string"},{"id":"a6c3fd23-a87a-42e2-b71e-cff8bdb9f491","name":"response","value":"={{ $json }}","type":"object"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[680,1000],"id":"2eace54f-c316-4268-93b7-bcb36992dff4","name":"Globals"}],"connections":{"Webhook":{"main":[[{"node":"Globals","type":"main","index":0}]]},"Code (Merged)":{"main":[[{"node":"Slack (Merged)","type":"main","index":0}]]},"PR Opened Check":{"main":[[{"node":"Code (Opened)","type":"main","index":0}]]},"Code (Opened)":{"main":[[{"node":"Slack (Opened)","type":"main","index":0}]]},"PR Closed Check":{"main":[[{"node":"Code (Merged)","type":"main","index":0}],[{"node":"PR Opened Check","type":"main","index":0}]]},"Globals":{"main":[[{"node":"PR Closed Check","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"52826e24-f192-4f51-9402-f934cdd6faf3","triggerCount":1,"tags":[],"safeName":"GitHub PR Opened & Closed Slack Notification"}