{"createdAt":"2025-04-24T23:43:25.235Z","updatedAt":"2025-04-30T05:43:32.000Z","id":"LDGf24cQPkSScZsX","name":"JIRA","active":false,"nodes":[{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-1060,-200],"id":"f883aaa6-e011-4c31-8a4f-f750d3d17056","name":"When clicking ‘Test workflow’"},{"parameters":{"rule":{"interval":[{}]}},"type":"n8n-nodes-base.scheduleTrigger","typeVersion":1.2,"position":[-1060,160],"id":"de219574-6b68-4e1e-bb2d-b805e8620491","name":"Schedule Trigger"},{"parameters":{"assignments":{"assignments":[{"id":"572edcb1-4e95-40f8-ac9a-397e3f10d2cc","name":"startDate","value":"={{$node[\"Set Variables\"].json[\"startDate\"]}}","type":"string"},{"id":"dc628569-f9b5-469f-8c83-684cc187a029","name":"endDate","value":"={{$node[\"Set Variables\"].json[\"endDate\"]}}","type":"string"},{"id":"460a056b-1493-4e68-9bcd-9f117025c350","name":"jiraDomain","value":"={{$node[\"Set Variables\"].json[\"jiraDomain\"]}}","type":"string"},{"id":"32778883-3052-43f4-83d3-cf4ee9abee98","name":"assignee","value":"={{$node[\"Set Variables\"].json[\"assignee\"]}}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-400,-200],"id":"e474b578-9498-4f72-bd96-4fdf2e5e292c","name":"Globals"},{"parameters":{"jsCode":"return [{\n  json: {\n    // startDate: $now.minus({days: 7}).startOf('day').toFormat('yyyy-MM-dd'),\n    // endDate: $now.toFormat('yyyy-MM-dd'),\n    startDate: '2025-04-21',\n    endDate:  '2025-04-27',\n    jiraDomain: $node[\"Get Jira Domain\"].json[\"jiraDomain\"],\n    assignee: [\"김상현\"].toString()\n  }\n}];"},"id":"84c737fd-b744-47a0-8a06-19763cf0897c","name":"Set Variables","type":"n8n-nodes-base.code","typeVersion":1,"position":[-620,-200]},{"parameters":{"workflowId":{"__rl":true,"value":"xZ99FIj6NshMqsIA","mode":"list","cachedResultName":"Get Jira Domain"},"workflowInputs":{"mappingMode":"defineBelow","value":{},"matchingColumns":[],"schema":[],"attemptToConvertTypes":false,"convertFieldsToString":true},"options":{}},"type":"n8n-nodes-base.executeWorkflow","typeVersion":1.2,"position":[-840,-200],"id":"315fe473-9e26-4519-b4be-a5bbcbce2f76","name":"Get Jira Domain"},{"parameters":{"method":"POST","url":"={{$node[\"Globals\"].json[\"jiraDomain\"]}}/rest/api/3/search/jql","authentication":"predefinedCredentialType","nodeCredentialType":"jiraSoftwareCloudApi","sendQuery":true,"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"jql\": \"created >= '{{$node[\"Globals\"].json[\"startDate\"]}}' AND created <= '{{$node[\"Globals\"].json[\"endDate\"]}}' AND updated >= '{{$node[\"Globals\"].json[\"startDate\"]}}' AND updated <= '{{$node[\"Globals\"].json[\"endDate\"]}}' AND assignee IN ({{$node[\"Globals\"].json[\"assignee\"]}})\",\n  \"fields\": [\"*all\"],\n  \"maxResults\": 1000,\n  \"fieldsByKeys\": false\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[-180,-200],"id":"fa058610-3567-4a2c-beca-1c5d5fff4286","name":"JIRA Search","credentials":{"jiraSoftwareCloudApi":{"id":"jd9f8LcXIUpGLHG7","name":"Colo Developjik1 Jira SW Cloud account"}}},{"parameters":{"promptType":"define","text":"=# 🚀 JIRA 주간 성과 분석 리포트\n## 📋 개요\n당신은 데이터 기반의 팀 성과 코치입니다. JIRA 활동 데이터를 분석하여 **{{$node[\"Globals\"].json[\"assignee\"]}}** 팀원의 업무 패턴과 성과를 파악하고, 객관적인 인사이트와 개선 방향을 제시해 주세요.\n\n## 📊 분석 대상 기간\n- 분석 기간: {{$node[\"Globals\"].json.startDate}}부터 {{$node[\"Globals\"].json.endDate}}까지\n- 담당자: {{$node[\"Globals\"].json[\"assignee\"]}}\n\n## 🔍 분석 요청 사항\n\n### 1️⃣ 주요 성과 요약\n**{{$node[\"Globals\"].json[\"assignee\"]}}** 팀원에 대해 다음 정보를 간결하게 요약해 주세요:\n- 완료한 이슈 수와 비율 (진행 중/완료/총 이슈)\n- 담당한 핵심 이슈 3개 (중요도, 복잡도 고려)\n- 주간 가장 큰 성과 1개 (비즈니스 임팩트 관점)\n\n### 2️⃣ 업무 패턴 분석\n**{{$node[\"Globals\"].json[\"assignee\"]}}** 팀원의 업무 스타일과 패턴을 파악해 주세요:\n- 업무 흐름: 업무를 처리하는 시간적 패턴 (특정 날짜/시간대에 집중)\n- 작업 전환 빈도: 동시에 여러 작업을 처리하는지 아니면 순차적으로 진행하는지\n- 의사결정 속도: 이슈 접수부터 처리 시작까지 소요 시간\n- 커뮤니케이션 스타일: 코멘트 빈도, 상태 업데이트 패턴 등\n- 강점 영역: 특정 유형의 이슈에서 높은 성과를 보이는 영역\n\n### 3️⃣ 효율성 지표\n다음 정량적 지표를 계산하고 해석해 주세요:\n- 평균 이슈 해결 시간 (유형별)\n- 작업 집중도 (동시 진행 작업 수, 작업 전환 빈도)\n- 우선순위 준수율 (High/Medium/Low 처리 비율)\n- 예상 시간 대비 실제 소요 시간 비율 (가능한 경우)\n\n### 4️⃣ 주간 타임라인 시각화\n**{{$node[\"Globals\"].json[\"assignee\"]}}** 팀원의 일주일 업무 흐름을 시간 순으로 설명해 주세요:\n- 어떤 업무로 한 주를 시작했는지\n- 이슈 간 전환 패턴 (하나를 완료 후 다음으로 넘어가는지, 병렬 진행하는지)\n- 예상치 못한 긴급 작업 발생 여부와 대응 방식\n- 주간 업무의 흐름에서 나타나는 특징적인 패턴\n\n### 5️⃣ 개선 기회 및 코칭 제안\n**{{$node[\"Globals\"].json[\"assignee\"]}}** 팀원의 성장을 위한 건설적인 제안을 제시해 주세요:\n- 업무 흐름에서 발견된 병목 현상 및 해소 방안\n- 효율성 향상을 위한 1-2가지 실행 가능한 제안\n- 개인의 강점을 더 발휘할 수 있는 업무 영역 제안\n- 역량 개발이 필요한 영역과 구체적인 개선 방법\n\n## 💡 결과물 형식\n- 분석은 사실에 기반한 객관적인 톤으로 작성해 주세요\n- 각 섹션은 핵심 인사이트, 구체적 데이터 포인트, 실행 가능한 제안을 포함해야 합니다\n- 리포트 길이는 400-600단어 내외로 작성해 주세요\n\n## 🛠️ 추가 지침\n- 데이터에서 객관적으로 도출 가능한 인사이트만 제시해 주세요\n- 개인의 역량이나 성향에 대한 지나친 추측은 피해 주세요\n- 모든 제안은 구체적이고 실행 가능해야 합니다\n\n이제, **{{$node[\"Globals\"].json[\"assignee\"]}}** 팀원에 대한 JIRA 이슈 데이터를 분석하여 포괄적인 성과 분석 리포트를 작성해 주세요.\n\n```json\n{{ JSON.stringify($json.issues, null, 2) }}\n```\n","options":{"systemMessage":"당신은 데이터 기반의 팀 성과 코치입니다. 당신의 역할은 JIRA 데이터를 분석하여 팀원들의 업무 패턴, 성과, 그리고 개선 기회를 파악하는 것입니다.\n\n## 핵심 역량 및 스타일\n- 객관적인 데이터 분석: 주관적 판단이 아닌 데이터에 기반한 인사이트 제공\n- 균형 잡힌 관점: 강점과 개선점을 균형 있게 다루며, 건설적인 피드백 제공\n- 전략적 사고: 단순 지표 나열이 아닌 비즈니스 맥락을 고려한 분석 제공 \n- 실용적 조언: 실행 가능하고 구체적인 개선 제안 제시\n- 명확한 커뮤니케이션: 복잡한 데이터를 이해하기 쉽게 설명\n\n## 분석 접근 방식\n1. **정량적 분석**: 완료율, 처리 시간, 우선순위 준수율 등 수치 기반 성과 측정\n2. **정성적 분석**: 업무 흐름, 의사결정 패턴, 협업 스타일 등 행동 패턴 분석\n3. **시간적 분석**: 일/주간 업무 흐름, 집중 시간대, 작업 전환 빈도 등 시간 관점 분석\n4. **비교 분석**: 과거 대비 변화, 팀 내 패턴 비교 (단, 개인 간 직접 비교는 지양)\n5. **맥락적 분석**: 프로젝트 상황, 업무 복잡도, 외부 요인 등 맥락 고려\n\n## 응답 형식 원칙\n- 객관적 사실과 데이터에 기반한 분석 제공\n- 팀원별로 구분된 섹션으로 리포트 구성\n- 핵심 인사이트를 먼저 제시하고 상세 분석 내용 전개\n- 시각화 요소(예: 타임라인, 차트)를 활용한 직관적 설명\n- 모든 제안은 구체적이고 실행 가능한 형태로 제시\n\n## 윤리적 가이드라인\n- 개인 성과에 대한 과도한 판단이나 평가는 지양\n- 데이터로 확인할 수 없는 추측성 내용 배제\n- 팀원 간 비교보다는 개인의 성장과 개선에 초점\n- 문제점 지적 시 반드시 구체적 개선 방안 함께 제시\n- 긍정적 성과와 노력에 대한 인정을 반드시 포함\n\n## 리포트 맞춤화\n- 팀 리더: 전체 팀 성과와 균형, 리소스 최적화, 잠재적 리스크에 초점\n- 개별 팀원: 개인 성과, 효율성, 성장 기회에 초점\n- 매니저: 프로세스 최적화, 팀 역동성, 생산성 향상에 초점\n\n이 지침을 바탕으로, 제공된 JIRA 데이터를 면밀히 분석하여 가치 있는 인사이트와 액션 가능한 제안을 담은 포괄적인 성과 분석 리포트를 작성해주세요."}},"type":"@n8n/n8n-nodes-langchain.agent","typeVersion":1.8,"position":[40,-200],"id":"25b83e37-5ec9-49b9-aef5-3eb5a7dba7f5","name":"AI Agent"},{"parameters":{"sessionIdType":"customKey","sessionKey":"=colosseum.atlassian jira weekly"},"type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","typeVersion":1.3,"position":[140,40],"id":"6896449d-e7bc-4310-8724-585f7f1f6f84","name":"Simple Memory"},{"parameters":{"model":{"__rl":true,"value":"gpt-4.1-nano","mode":"list","cachedResultName":"gpt-4.1-nano"},"options":{}},"type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","typeVersion":1.2,"position":[0,20],"id":"3b54f76a-c9c2-4aac-afa1-483e79b2031f","name":"OpenAI Chat Model","credentials":{"openAiApi":{"id":"teZK5ibPNHcUd7eK","name":"Developjik OpenAi account"}}},{"parameters":{"pageId":{"__rl":true,"value":"1e032a726b70800c95bbf0d10b2fd641","mode":"id"},"title":"=📄 {{$node[\"Globals\"].json[\"startDate\"]}} ~ {{$node[\"Globals\"].json[\"endDate\"]}} {{$node[\"Globals\"].json[\"assignee\"]}} JIRA 업무 분석","blockUi":{"blockValues":[{"textContent":" "}]},"options":{}},"type":"n8n-nodes-base.notion","typeVersion":2.2,"position":[640,-200],"id":"299ecaa9-0eee-4f21-85d7-9624477d51a7","name":"Notion","credentials":{"notionApi":{"id":"BwBX0m4zgSiKCzTS","name":"Developjik Notion account"}}},{"parameters":{"jsCode":"// 입력된 AI 결과 데이터를 처리합니다\nlet aiOutput = $input.all()[0].json;\n\n// 문자열 확인\nif (typeof aiOutput === 'string') {\n  // 그대로 사용\n} else if (aiOutput.output) {\n  // output 필드가 있으면 사용\n  aiOutput = aiOutput.output;\n} else {\n  // 기타 경우 문자열로 변환\n  aiOutput = JSON.stringify(aiOutput);\n}\n\n// Notion 블록 배열 생성\nconst notionBlocks = [];\n\n// 내용을 줄 단위로 분리\nconst lines = aiOutput.split('\\n');\nlet currentParagraph = \"\";\nlet inHeading = false;\nlet currentHeadingLevel = 0;\nlet inList = false;\nlet listItems = [];\nlet inNumberedList = false;\nlet numberedListItems = [];\nlet inTable = false;\nlet tableRows = [];\nlet tableHeaders = [];\n\n// 헤더 1 제외 플래그\nlet skipFirstH1 = true;\n\nfor (let i = 0; i < lines.length; i++) {\n  const line = lines[i];\n  \n  // 테이블 확인 (| 로 시작하고 끝나는 줄)\n  if (line.trim().startsWith('|') && line.trim().endsWith('|')) {\n    // 이전 내용이 있으면 저장\n    if (currentParagraph.trim()) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n    \n    // 테이블 시작 또는 계속\n    if (!inTable) {\n      inTable = true;\n      // 첫 줄은 헤더로 처리\n      tableHeaders = line.trim().split('|')\n        .map(header => header.trim())\n        .filter(header => header.length > 0);\n    } else {\n      // 구분선(-----) 행은 건너뛰기\n      if (!line.includes('----')) {\n        const rowCells = line.trim().split('|')\n          .map(cell => cell.trim())\n          .filter(cell => cell.length > 0);\n        \n        if (rowCells.length > 0) {\n          tableRows.push(rowCells);\n        }\n      }\n    }\n    \n    // 다음 행이 테이블 행이 아니거나 마지막 행인 경우 테이블 추가\n    if (i === lines.length - 1 || !lines[i + 1].trim().startsWith('|')) {\n      if (tableHeaders.length > 0 && tableRows.length > 0) {\n        // Notion Table 블록 생성\n        const tableBlock = {\n          \"object\": \"block\",\n          \"type\": \"table\",\n          \"table\": {\n            \"table_width\": tableHeaders.length,\n            \"has_column_header\": true,\n            \"has_row_header\": false,\n            \"children\": []\n          }\n        };\n        \n        // 헤더 행 추가\n        tableBlock.table.children.push({\n          \"object\": \"block\",\n          \"type\": \"table_row\",\n          \"table_row\": {\n            \"cells\": tableHeaders.map(header => [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": header\n              },\n              \"annotations\": {\n                \"bold\": true\n              }\n            }])\n          }\n        });\n        \n        // 데이터 행 추가\n        for (const row of tableRows) {\n          tableBlock.table.children.push({\n            \"object\": \"block\",\n            \"type\": \"table_row\",\n            \"table_row\": {\n              \"cells\": row.map(cell => [{\n                \"type\": \"text\",\n                \"text\": {\n                  \"content\": cell\n                }\n              }])\n            }\n          });\n        }\n        \n        notionBlocks.push(tableBlock);\n      }\n      \n      // 테이블 상태 초기화\n      inTable = false;\n      tableHeaders = [];\n      tableRows = [];\n    }\n    \n    continue;\n  }\n  \n  // 헤더 확인 (# 기준)\n  if (line.startsWith('# ')) {\n    // 첫 번째 H1 헤더는 건너뛰기 (이미 페이지 제목으로 있으므로)\n    if (skipFirstH1) {\n      skipFirstH1 = false;\n      continue;\n    }\n    \n    // 이전 내용이 있으면 저장\n    if (currentParagraph.trim()) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n    \n    // 제목 텍스트에서 이모지 추출\n    let titleText = line.substring(2).trim();\n    let titleEmoji = null;\n    \n    // 이모지 패턴 확인\n    const emojiMatch = titleText.match(/^([🚀📋🔍📊💡🛠️📘🧠🧩🗣️🔧🧭])\\s+(.+)$/);\n    if (emojiMatch) {\n      titleEmoji = emojiMatch[1];\n      titleText = emojiMatch[2];\n    }\n    \n    // H1 헤더 추가\n    notionBlocks.push({\n      \"object\": \"block\",\n      \"type\": \"heading_1\",\n      \"heading_1\": {\n        \"rich_text\": [{\n          \"type\": \"text\",\n          \"text\": {\n            \"content\": titleText\n          },\n          \"annotations\": {\n            \"bold\": true,\n            \"color\": \"blue\"\n          }\n        }]\n      }\n    });\n    \n    // 구분선 추가\n    notionBlocks.push({\n      \"object\": \"block\",\n      \"type\": \"divider\",\n      \"divider\": {}\n    });\n    \n    inHeading = true;\n    currentHeadingLevel = 1;\n  }\n  // H2 헤더 (## 기준)\n  else if (line.startsWith('## ')) {\n    // 이전 내용이 있으면 저장\n    if (currentParagraph.trim()) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n    \n    // 제목 텍스트에서 이모지 및 숫자 추출\n    let titleText = line.substring(3).trim();\n    let titleEmoji = null;\n    \n    // 숫자가 들어있는 이모지 패턴 (예: 1️⃣)\n    const emojiNumberMatch = titleText.match(/^([0-9]️⃣|[0-9⃣])\\s+(.+)$/);\n    if (emojiNumberMatch) {\n      titleEmoji = emojiNumberMatch[1];\n      titleText = emojiNumberMatch[2];\n    } else {\n      // 일반 이모지 패턴\n      const emojiMatch = titleText.match(/^([🚀📋🔍📊💡🛠️📘🧠🧩🗣️🔧🧭])\\s+(.+)$/);\n      if (emojiMatch) {\n        titleEmoji = emojiMatch[1];\n        titleText = emojiMatch[2];\n      }\n    }\n    \n    // 숫자 패턴 (예: 1. 주요 성과 요약 -> ① 주요 성과 요약)\n    const numMatch = titleText.match(/^([0-9]+)\\.\\s+(.+)$/);\n    if (numMatch) {\n      const num = parseInt(numMatch[1]);\n      // 숫자를 동그라미 숫자로 변환 (①, ②, ③, ...)\n      const circledNumbers = ['①', '②', '③', '④', '⑤', '⑥', '⑦', '⑧', '⑨', '⑩'];\n      if (num >= 1 && num <= 10) {\n        titleEmoji = circledNumbers[num - 1];\n        titleText = numMatch[2];\n      }\n    }\n    \n    // H2 헤더 추가\n    notionBlocks.push({\n      \"object\": \"block\",\n      \"type\": \"heading_2\",\n      \"heading_2\": {\n        \"rich_text\": [{\n          \"type\": \"text\",\n          \"text\": {\n            \"content\": titleEmoji ? `${titleEmoji} ${titleText}` : titleText\n          },\n          \"annotations\": {\n            \"bold\": true,\n            \"color\": \"blue\"\n          }\n        }]\n      }\n    });\n    \n    inHeading = true;\n    currentHeadingLevel = 2;\n  }\n  // H3 헤더 (### 기준)\n  else if (line.startsWith('### ')) {\n    // 이전 내용이 있으면 저장\n    if (currentParagraph.trim()) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n    \n    // 제목 텍스트에서 이모지 추출\n    let titleText = line.substring(4).trim();\n    let titleEmoji = null;\n    \n    // 이모지 패턴 확인\n    const emojiMatch = titleText.match(/^([🚀📋🔍📊💡🛠️📘🧠🧩🗣️🔧🧭])\\s+(.+)$/);\n    if (emojiMatch) {\n      titleEmoji = emojiMatch[1];\n      titleText = emojiMatch[2];\n    }\n    \n    // H3 헤더 추가\n    notionBlocks.push({\n      \"object\": \"block\",\n      \"type\": \"heading_3\",\n      \"heading_3\": {\n        \"rich_text\": [{\n          \"type\": \"text\",\n          \"text\": {\n            \"content\": titleEmoji ? `${titleEmoji} ${titleText}` : titleText\n          },\n          \"annotations\": {\n            \"bold\": true\n          }\n        }]\n      }\n    });\n    \n    inHeading = true;\n    currentHeadingLevel = 3;\n  }\n  // 수평선 확인 (---, ___ 등)\n  else if (line.match(/^[\\-_*]{3,}$/)) {\n    // 이전 내용이 있으면 저장\n    if (currentParagraph.trim()) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n    \n    // 수평선 추가\n    notionBlocks.push({\n      \"object\": \"block\",\n      \"type\": \"divider\",\n      \"divider\": {}\n    });\n  }\n  // 번호 리스트 항목 확인 (1., 2., 3. 등으로 시작하는 줄)\n  else if (line.trim().match(/^([0-9]+)\\.\\s+(.+)$/)) {\n    // 이전 내용이 있고 리스트가 아니었으면 저장\n    if (currentParagraph.trim() && !inNumberedList) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 불릿 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트 시작 또는 계속\n    inNumberedList = true;\n    const matches = line.trim().match(/^([0-9]+)\\.\\s+(.+)$/);\n    const listItemContent = matches[2];\n    \n    // 굵은 글씨 패턴이 있는지 확인 (**, __ 로 감싸진 텍스트)\n    let processedContent = listItemContent;\n    processedContent = processedContent.replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\"); // ** 제거\n    \n    numberedListItems.push(processedContent);\n  }\n  // 리스트 항목 확인 (- 또는 * 또는 • 로 시작하는 줄)\n  else if (line.trim().match(/^[\\-*•]\\s+(.+)$/)) {\n    // 이전 내용이 있고 리스트가 아니었으면 저장\n    if (currentParagraph.trim() && !inList) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n    \n    // 리스트 시작 또는 계속\n    inList = true;\n    const matches = line.trim().match(/^[\\-*•]\\s+(.+)$/);\n    const listItemContent = matches[1];\n    \n    // 굵은 글씨 패턴이 있는지 확인 (**, __ 로 감싸진 텍스트)\n    let processedContent = listItemContent;\n    processedContent = processedContent.replace(/\\*\\*([^*]+)\\*\\*/g, \"$1\"); // ** 제거\n    \n    // 리스트 아이템에 이모지가 있는지 확인\n    const emojiMatch = processedContent.match(/^([🚀📋🔍📊💡🛠️📘🧠🧩🗣️🔧🧭])\\s+(.+)$/);\n    if (emojiMatch) {\n      processedContent = `${emojiMatch[1]} ${emojiMatch[2]}`;\n    }\n    \n    listItems.push(processedContent);\n  }\n  // 빈 줄인 경우\n  else if (line.trim() === '') {\n    // 이전 내용이 있으면 저장\n    if (currentParagraph.trim()) {\n      notionBlocks.push({\n        \"object\": \"block\",\n        \"type\": \"paragraph\",\n        \"paragraph\": {\n          \"rich_text\": [{\n            \"type\": \"text\",\n            \"text\": {\n              \"content\": currentParagraph.trim()\n            }\n          }]\n        }\n      });\n      currentParagraph = \"\";\n    }\n    \n    // 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n  }\n  // 일반 텍스트인 경우\n  else {\n    // 리스트가 진행 중이었다면 종료\n    if (inList && listItems.length > 0) {\n      for (const item of listItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"bulleted_list_item\",\n          \"bulleted_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      listItems = [];\n      inList = false;\n    }\n    \n    // 번호 리스트가 진행 중이었다면 종료\n    if (inNumberedList && numberedListItems.length > 0) {\n      for (const item of numberedListItems) {\n        notionBlocks.push({\n          \"object\": \"block\",\n          \"type\": \"numbered_list_item\",\n          \"numbered_list_item\": {\n            \"rich_text\": [{\n              \"type\": \"text\",\n              \"text\": {\n                \"content\": item\n              }\n            }]\n          }\n        });\n      }\n      numberedListItems = [];\n      inNumberedList = false;\n    }\n    \n    // 일반 텍스트는 현재 단락에 추가\n    if (currentParagraph) {\n      currentParagraph += \"\\n\" + line;\n    } else {\n      currentParagraph = line;\n    }\n  }\n}\n\n// 마지막 남은 내용 처리\nif (currentParagraph.trim()) {\n  notionBlocks.push({\n    \"object\": \"block\",\n    \"type\": \"paragraph\",\n    \"paragraph\": {\n      \"rich_text\": [{\n        \"type\": \"text\",\n        \"text\": {\n          \"content\": currentParagraph.trim()\n        }\n      }]\n    }\n  });\n}\n\n// 마지막 리스트 처리\nif (inList && listItems.length > 0) {\n  for (const item of listItems) {\n    notionBlocks.push({\n      \"object\": \"block\",\n      \"type\": \"bulleted_list_item\",\n      \"bulleted_list_item\": {\n        \"rich_text\": [{\n          \"type\": \"text\",\n          \"text\": {\n            \"content\": item\n          }\n        }]\n      }\n    });\n  }\n}\n\n// 마지막 번호 리스트 처리\nif (inNumberedList && numberedListItems.length > 0) {\n  for (const item of numberedListItems) {\n    notionBlocks.push({\n      \"object\": \"block\",\n      \"type\": \"numbered_list_item\",\n      \"numbered_list_item\": {\n        \"rich_text\": [{\n          \"type\": \"text\",\n          \"text\": {\n            \"content\": item\n          }\n        }]\n      }\n    });\n  }\n}\n\n// 구분선으로 리포트 끝 표시\nnotionBlocks.push({\n  \"object\": \"block\",\n  \"type\": \"divider\",\n  \"divider\": {}\n});\n\n// 작은 표기\nnotionBlocks.push({\n  \"object\": \"block\",\n  \"type\": \"paragraph\",\n  \"paragraph\": {\n    \"rich_text\": [{\n      \"type\": \"text\",\n      \"text\": {\n        \"content\": \"생성일: \" + new Date().toLocaleDateString()\n      },\n      \"annotations\": {\n        \"italic\": true,\n        \"color\": \"gray\"\n      }\n    }]\n  }\n});\n\n// 결과 반환\nreturn {\n  json: {\n    blocks: notionBlocks\n  }\n};"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[420,-200],"id":"ab649b36-2032-4f74-8ac8-6f821918687a","name":"Format for Notion"},{"parameters":{"method":"PATCH","url":"=https://api.notion.com/v1/blocks/{{$node['Notion'].json.id}}/children","sendHeaders":true,"headerParameters":{"parameters":[{"name":"Authorization","value":"Bearer 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"},{"name":"Content-Type","value":"application/json"},{"name":"Notion-Version","value":"2022-06-28"}]},"sendBody":true,"specifyBody":"json","jsonBody":"={\n  \"children\": {{JSON.stringify($node[\"Format for Notion\"].json.blocks)}}\n}","options":{}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[900,-200],"id":"dd44b98b-2338-4304-810a-c02314638330","name":"HTTP Request"}],"connections":{"When clicking ‘Test workflow’":{"main":[[{"node":"Get Jira Domain","type":"main","index":0}]]},"Globals":{"main":[[{"node":"JIRA Search","type":"main","index":0}]]},"Set Variables":{"main":[[{"node":"Globals","type":"main","index":0}]]},"Get Jira Domain":{"main":[[{"node":"Set Variables","type":"main","index":0}]]},"JIRA Search":{"main":[[{"node":"AI Agent","type":"main","index":0}]]},"Simple Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"AI Agent":{"main":[[{"node":"Format for Notion","type":"main","index":0}]]},"Schedule Trigger":{"main":[[]]},"Format for Notion":{"main":[[{"node":"Notion","type":"main","index":0}]]},"Notion":{"main":[[{"node":"HTTP Request","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"893e087c-c245-4d1b-b860-8ed99c270c7b","triggerCount":0,"tags":[],"safeName":"JIRA"}